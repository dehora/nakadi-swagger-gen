package io.swagger.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;



/**
 * Operational statistics for an EventType. This data is generated by Nakadi based on the runtime\nand might be used to guide changes in internal parameters.\n
 **/

@ApiModel(description = "Operational statistics for an EventType. This data is generated by Nakadi based on the runtime\nand might be used to guide changes in internal parameters.\n")
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaClientCodegen", date = "2016-06-15T20:45:01.680+01:00")
public class EventTypeStatistics   {
  
  private Integer messagesPerMinute = null;
  private Integer messageSize = null;
  private Integer readParallelism = null;
  private Integer writeParallelism = null;

  
  /**
   * Write rate for events of this EventType. This rate encompasses all producers of this\nEventType for a Nakadi cluster.\n\nMeasured in event count per minute.\n
   **/
  public EventTypeStatistics messagesPerMinute(Integer messagesPerMinute) {
    this.messagesPerMinute = messagesPerMinute;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "Write rate for events of this EventType. This rate encompasses all producers of this\nEventType for a Nakadi cluster.\n\nMeasured in event count per minute.\n")
  @JsonProperty("messages_per_minute")
  public Integer getMessagesPerMinute() {
    return messagesPerMinute;
  }
  public void setMessagesPerMinute(Integer messagesPerMinute) {
    this.messagesPerMinute = messagesPerMinute;
  }

  
  /**
   * Average message size for each Event of this EventType. Includes in the count the whole serialized\nform of the event, including metadata.\nMeasured in bytes.\n
   **/
  public EventTypeStatistics messageSize(Integer messageSize) {
    this.messageSize = messageSize;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "Average message size for each Event of this EventType. Includes in the count the whole serialized\nform of the event, including metadata.\nMeasured in bytes.\n")
  @JsonProperty("message_size")
  public Integer getMessageSize() {
    return messageSize;
  }
  public void setMessageSize(Integer messageSize) {
    this.messageSize = messageSize;
  }

  
  /**
   * Amount of parallel readers (consumers) to this EventType.\n
   **/
  public EventTypeStatistics readParallelism(Integer readParallelism) {
    this.readParallelism = readParallelism;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "Amount of parallel readers (consumers) to this EventType.\n")
  @JsonProperty("read_parallelism")
  public Integer getReadParallelism() {
    return readParallelism;
  }
  public void setReadParallelism(Integer readParallelism) {
    this.readParallelism = readParallelism;
  }

  
  /**
   * Amount of parallel writers (producers) to this EventType.\n
   **/
  public EventTypeStatistics writeParallelism(Integer writeParallelism) {
    this.writeParallelism = writeParallelism;
    return this;
  }
  
  @ApiModelProperty(example = "null", required = true, value = "Amount of parallel writers (producers) to this EventType.\n")
  @JsonProperty("write_parallelism")
  public Integer getWriteParallelism() {
    return writeParallelism;
  }
  public void setWriteParallelism(Integer writeParallelism) {
    this.writeParallelism = writeParallelism;
  }

  

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventTypeStatistics eventTypeStatistics = (EventTypeStatistics) o;
    return Objects.equals(this.messagesPerMinute, eventTypeStatistics.messagesPerMinute) &&
        Objects.equals(this.messageSize, eventTypeStatistics.messageSize) &&
        Objects.equals(this.readParallelism, eventTypeStatistics.readParallelism) &&
        Objects.equals(this.writeParallelism, eventTypeStatistics.writeParallelism);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messagesPerMinute, messageSize, readParallelism, writeParallelism);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventTypeStatistics {\n");
    
    sb.append("    messagesPerMinute: ").append(toIndentedString(messagesPerMinute)).append("\n");
    sb.append("    messageSize: ").append(toIndentedString(messageSize)).append("\n");
    sb.append("    readParallelism: ").append(toIndentedString(readParallelism)).append("\n");
    sb.append("    writeParallelism: ").append(toIndentedString(writeParallelism)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

